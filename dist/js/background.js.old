var storage;
(function(storage){
var account = null
storage.account=account
})(storage || (storage = {}));

const HASH_CONFIG = {
    accountCGAS:Neo.Uint160.parse('4c7cca112a8c5666bce5da373010fc0920d0e0d2'),
    ID_CGAS: Neo.Uint160.parse('74f2dc36a68fdc4682034178eb2220729231db76'),
    DAPP_NNC: Neo.Uint160.parse("fc732edee1efdf968c23c20a9628eaa5a6ccb934"),
    baseContract : Neo.Uint160.parse("348387116c4a75e420663277d9c02049907128c7"),
    resolverHash: `6e2aea28af9c5febea0774759b1b76398e3167f1`,
    ID_GAS:"0x602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7",
    ID_NEO:"0xc56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b",
    saleContract: Neo.Uint160.parse("1b0ca9a908e07b20469917aed8d503049b420eeb"),
    ID_NNC: Neo.Uint160.parse('fc732edee1efdf968c23c20a9628eaa5a6ccb934'),
  }

const baseCommonUrl = "https://api.nel.group/api";
const baseUrl = "https://apiwallet.nel.group/api";

console.log(baseCommonUrl);
console.log(baseUrl);


const makeRpcPostBody = (method, params) => {
const body = {};
body["jsonrpc"] = "2.0";
body["id"] = 1;
body["method"] = method;
body["params"] = params;
return JSON.stringify(body);
}

const makeRpcUrl=(url, method, params)=>
{
if (url[url.length - 1] != '/')
url = url + "/";
var urlout = url + "?jsonrpc=2.0&id=1&method=" + method + "&params="+JSON.stringify(params);
return urlout;
}

function request(opts) {
let url = [baseUrl,storage.network].join('/');
if (opts.baseUrl === 'common') {
url = [baseCommonUrl,storage.network].join('/')
}

const input = opts.isGET?makeRpcUrl(url,opts.method,opts.params):url;
const init = opts.isGET ?{ method:'GET'}:{method: 'POST',body:makeRpcPostBody(opts.method,opts.params)};
try {    
    fetch(input,init)
    .then(value=>{
        value.json()
        .then(json=>{
            if(json.result){      
                if(opts.getAll){
                    return json
                }
                else
                {
                    return json.result;
                }
            }
            else if(json.error["code"]===-1)
            {
            return null;
            }else{
            throw new Error(json.error);    
            }
        })
    })
  } catch (error) {
    throw error;    
  }
}

const Api = {
    /**
     * 获取nep5的资产（CGAS）
     */
    getnep5balanceofaddress :  (address,assetId) => {
      const opts = {
       method:'getnep5balanceofaddress',
       params:[
         assetId,
         address
       ],
       baseUrl:'common'
      }
      return request(opts);
    },
    getregisteraddressbalance :  (address,register) => {
      // alert(DomainSelling.RootNeo.register.toString())
      const opts = {
       method:'getregisteraddressbalance',
       params:[
        address,
        register
       ]
      }
      return request(opts);
    },
    sendrawtransaction :  (data) => {
      const opts = {
       method:'sendrawtransaction',
       params:[
        data
       ],
       baseUrl:'common'
      }
      return request(opts);
    },
    getUtxo:(address)=>{
      const opts={
        method:"getutxo",
        params:[
          address
        ],
        baseUrl:'common'
      }
      return request(opts);
    },
    
    getDomainInfo:(domain)=>{
      const opts={
        method:"getdomaininfo",
        params:[
          domain
        ]
      }
      return request(opts);
    },
    
    /**
     * 判断交易是否入链
     * @param txid 交易id
     */
    hasTx:(txid)=>{
      const opts={
        method:"hastx",
        params:[
          txid
        ]
      }
      return request(opts);
    },
    
    /**
     * 判断合约调用是否抛出 notify
     * @param txid 交易id
     */
    hasContract:(txid)=>{
      const opts={
        method:"hascontract",
        params:[
          txid
        ]
      }
      return request(opts);
    },
    
    /**
     * 判断双交易是否成功
     * @param txid 交易id
     */
    getRehargeAndTransfer:(txid)=>{
      const opts={
        method:"getrechargeandtransfer",
        params:[
          txid
        ]
      }
      return request(opts);
    },
    
    getBlockCount:()=>{
      const opts={
        method:"getblockcount",
        params:[],
        baseUrl:"common"
      }
      return request(opts);
    },
    
    rechargeAndTransfer:(data1,data2)=>{
      const opts={
        method:"rechargeandtransfer",
        params:[
          data1,
          data2
        ]
      }
      return request(opts);
    },
    /**
     * @method 获得nep5资产信息
     * @param asset 资产id
     */
    getnep5asset:(asset)=>{
      const opts={
        method:"getnep5asset",
        params:[
          asset
        ]
      }
      return request(opts);
    }
}
function invokeScriptBuild(data)
{
    let sb = new ThinNeo.ScriptBuilder();
    let arr = data.arguments.map(argument=>{
        let str = ""
        switch (argument.type) {                
            case "String":
                str="(str)"+argument.value    
                break;
            case "Integer":
                str="(int)"+argument.value    
                break;
            case "Hash160":
                str="(hex160)"+argument.value                        
                break;
            case "ByteArray":
                str="(bytes)"+argument.value                        
                break;
            case "Boolean":
                str="(int)"+(argument.value?1:0);                    
                break;
            case "Address":
                str="(addr)"+argument.value   
                break;             
            case "Array":
                // str="(str)"+argument.value 暂时不考虑                
                break;
            default:
                throw new Error("No parameter of this type");
        }
        return str;
    })
    sb.EmitParamJson(arr)
    sb.EmitPushString(data.operation)
    sb.EmitAppCall(Neo.Uint160.parse(data.scriptHash));
    return sb.ToArray();
}

const sendInvokeGroup = (invoke)=>{
    let script = invokeScriptBuild(invoke)
    let tran = new ThinNeo.Transaction();
    tran.version = 0;// 0 or 1
    tran.extdata = null;
    tran.witnesses = [];
    tran.attributes = [];
    tran.inputs = [];
    tran.outputs = [];
    this.type = ThinNeo.TransactionType.InvocationTransaction;
    this.extdata = new ThinNeo.InvokeTransData();
    (this.extdata)['script'] = script;
    this.attributes = [];
    this.attributes[ 0 ] = new ThinNeo.Attribute();
    this.attributes[ 0 ].usage = ThinNeo.TransactionAttributeUsage.Script;
    this.attributes[ 0 ].data = ThinNeo.Helper.GetPublicKeyScriptHash_FromAddress(common.account.address);
    
    var message  = tran.GetMessage().clone();
    var signdata = ThinNeo.Helper.Sign(message,storage.account.prikeyHex.toHexString());
    tran.AddWitness(signdata,common.account.pubkeyHex.toHexString(),storage.account.address);
    var data = tran.GetRawData();
    var hex = data.toHexString();
    Api.sendrawtransaction(hex);
}

// function contractBuilder(invoke){
//     let tran = new Transaction();
    
//     try {
//         const script=invokeScriptBuild(invoke);
//         tran.setScript(script);
//     } catch (error) {
//         console.log(error);            
//     }
//     if(!!invoke.fee && invoke.fee!=='' && invoke.fee!='0'){
        
//         try {
//             const utxos = await MarkUtxo.getUtxoByAsset(HASH_CONFIG.ID_GAS);
//             if(utxos)
//                 tran.creatInuptAndOutup(utxos,Neo.Fixed8.parse(invoke.fee));
//         } catch (error) {
//             console.log(error);
//         }
//     }
//     try {
//         const message  = tran.GetMessage().clone();
//         const signdata = ThinNeo.Helper.Sign(message,common.account.prikey);
//         tran.AddWitness(signdata,common.account.pubkey,common.account.address);
//         const data = tran.GetRawData();
//         return data;
        
//     } catch (error) {
//         console.log(error);            
//     }
// }


chrome.runtime.onMessage.addListener(
    (request, sender, sendResponse) => {
        if (request.key === "getAccount") {
            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                
                chrome.storage.local.set(
                    {
                        label:"getAccount",
                        message:{
                            account:storage.account?{address:storage.account.address}:undefined,
                            title:request.msg.refInfo.refTitle,
                            domain:request.msg.refInfo.refDomain
                        },
                    },
                    ()=>{               
                        var notify = window.open ('notify.html', 'notify', 'height=602, width=377, top=0, left=0, toolbar=no, menubar=no, scrollbars=no,resizable=no,location=no, status=no')        
                        
                        notify.onload = () => {
                        }
                        //获得关闭事件
                        var loop = setInterval(function() { 
                               if(notify.closed) {    
                                    chrome.storage.local.get("confirm",res=>{
                                        if(res["confirm"]==="confirm")
                                        {
                                            chrome.tabs.sendMessage(tabs[0].id, {
                                                message: "getAccount_R",
                                                data:{
                                                    addr : storage.account.address
                                                }
                                            });  
                                        }else if(result["confirm"]==="cancel"){              
                                        }
                                    })
                                   clearInterval(loop);
                               }    
                            }, 1000
                        );
                    }
                );
            })
        }
        if (request.key === 'invokeGroup')
        {
            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                chrome.storage.local.set({
                    label:"invokeGroup",
                    message:{
                        account:storage.account?{address:storage.account.address}:undefined,
                        title:request.msg.refInfo.refTitle,
                        domain:request.msg.refInfo.refDomain,
                        invoke:request.msg.invokeParam
                    }
                },()=>{
                    var notify = window.open ('notify.html', 'notify', 'height=600, width=350, top=150, left=100, toolbar=no, menubar=no, scrollbars=no,resizable=no,location=no, status=no')
                    notify.onload = () => {}

                    //获得关闭事件
                    var loop = setInterval(function() { 
                           if(notify.closed) {    
                                chrome.storage.local.get("confirm",res=>{
                                    if(res["confirm"]==="confirm")
                                    {
                                        chrome.tabs.sendMessage(tabs[0].id, {
                                            message: "getAccount_R",
                                            data:{
                                                addr : storage.account.address
                                            }
                                        });  
                                    }else if(result["confirm"]==="cancel"){              
                                    }
                                })
                               clearInterval(loop);
                           }    
                        }, 1000
                    );

                });

            })
        }
        if (request.key === "sendTransferTx")
        {
            chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
                var notify = window.open ('notify.html', 'notify', 'height=600, width=350, top=150, left=100, toolbar=no, menubar=no, scrollbars=no,resizable=no,location=no, status=no')
                notify.onload = () => {}

                //获得关闭事件
                var loop = setInterval(()=> { 
                       if(notify.closed) {    
                           clearInterval(loop);    
                           alert('notify Closed');
                       }    
                    }, 1000);
            })
        }
        if (request.key === 'getBalanceByAddr')
        {
            getBalanceByAddr(request.message,function(data)
            {
                chrome.runtime.sendMessage({result: data});
            })
            sendResponse({ result : "received:" + request.message });
        }
        if (request.key === "test")
        {          
            sendResponse({ result: "background get test request" + thin.Helper.GetPublicKeyScriptHash_FromAddress(request.message)});
            console.info("background get test request")
        }
    }
);